#!/bin/sh

# lh_binary_syslinux(1) - installs syslinux into binary
# Copyright (C) 2006-2007 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

set -e

# Including common functions
LH_BASE="${LH_BASE:-/usr/share/live-helper}"

for FUNCTION in "${LH_BASE}"/functions/*.sh
do
	. "${FUNCTION}"
done

# Setting static variables
DESCRIPTION="installs syslinux into binary"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffile config/common
Read_conffile config/bootstrap
Read_conffile config/chroot
Read_conffile config/binary
Read_conffile config/source
Set_defaults

if [ "${LIVE_BOOTLOADER}" != "syslinux" ]
then
	exit 0
fi

Echo_message "Begin installing syslinux..."

# Requiring stage file
Require_stagefile .stage/bootstrap

# Checking stage file
Check_stagefile .stage/binary_syslinux

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

if [ "${LIVE_ARCHITECTURE}" != "amd64" ] && [ "${LIVE_ARCHITECTURE}" != "i386" ]
then
	Echo_warning "skipping binary_syslinux, foreign architecture."
	exit 0
fi

# Checking user templates
if [ ! -d "${LIVE_TEMPLATES}" ]
then
	if [ -d ../"${LIVE_TEMPLATES}" ]
	then
		LIVE_TEMPLATES="../${LIVE_TEMPLATES}"
	else
		Echo_error "user specified templates not accessible in ${LIVE_TEMPLATES}"
		exit 1
	fi
fi

# Check local templates
if [ -d config/templates/syslinux ]
then
	LIVE_TEMPLATES="config/templates"
fi

# Checking depends
Check_package chroot/usr/bin/syslinux syslinux

# Installing depends
Install_package

case "${LH_INITRAMFS}" in
	casper)
		INITFS="casper"
		;;

	live-initramfs)
		INITFS="live"
		;;
esac

# Setting destination directory
case "${LIVE_BINARY_IMAGES}" in
	iso)
		DESTDIR_LIVE="binary/live"
		DESTDIR_INSTALL="binary/install"
		;;

	net)
		DESTDIR_LIVE="tftpboot"
		DESTDIR_INSTALL="tftpboot"
	;;

	tar|usb-hdd)
		DESTDIR_LIVE="binary/live"
		DESTDIR_INSTALL="binary/install"

		# Workaround for syslinux (<< 3.36) which doesn't support long file/path names
		if [ "${LIVE_DISTRIBUTION}" = "etch" ]
		then
			DESTDIR_LIVE="binary"
			DESTDIR_INSTALL="binary"
		fi
		;;
esac

# Temporary check for broken syslinux
if [ "${LIVE_BINARY_IMAGES}" = "iso" ]
then
	# Assembling multi-arch
	if [ -n "${MULTIARCH}" ]
	then
		case "${LIVE_ARCHITECTURE}" in
			amd64)
				DESTDIR_LIVE="${DESTDIR_LIVE}.amd"
				DESTDIR_INSTALL="${DESTDIR_INSTALL}.amd"
				;;

			i386)
				DESTDIR_LIVE="${DESTDIR_LIVE}.386"
				DESTDIR_INSTALL="${DESTDIR_INSTALL}.386"
				;;
		esac
	fi
fi

# Creating directory
mkdir -p "${DESTDIR_LIVE}"

# Setting boot parameters
if [ -n "${LIVE_ENCRYPTION}" ]
then
	LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} encryption=${LIVE_ENCRYPTION}"
fi

if [ -n "${LIVE_USERNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} username=${LIVE_USERNAME}"
			;;

		live-initramfs)
			if [ "${LIVE_USERNAME}" != "user" ]
			then
				LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} username=${LIVE_USERNAME}"
			fi
			;;
	esac
fi

if [ -n "${LIVE_HOSTNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} hostname=${LIVE_HOSTNAME}"
			;;

		live-initramfs)
			if [ "${LIVE_HOSTNAME}" != "debian" ]
			then
				LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} hostname=${LIVE_HOSTNAME}"
			fi
			;;
	esac
fi

LIVE_BOOTAPPEND="`echo ${LIVE_BOOTAPPEND} | sed -e 's/  //'`"

# Parameters are listed at: linux/Documentation/kernel-parameters.txt
FAILSAFE="noapic noapm nodma nomce nolapic nosmp vga=normal"

# Assembling kernel configuration
if [ "${LIVE_BINARY_IMAGES}" != "net" ]
then
	DEFAULT_FLAVOUR="`echo ${LIVE_LINUX_FLAVOURS} | awk '{ print $1 }'`"

	# Workaround for syslinux (<< 3.36) which doesn't support long file/path names
	if [ "`basename ${DESTDIR_LIVE}`" = "binary" ]
	then
		LINUX="# Debian GNU/Linux - live\nLABEL live\n\tkernel `basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}`\n\tappend initrd=initrd.img-`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND"
		LINUX="${LINUX}\n\n# Debian GNU/Linux - live-failsafe\nLABEL live-failsafe\n\tkernel `basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}`\n\tappend initrd=initrd.img-`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND ${FAILSAFE}"
	else
		LINUX="# Debian GNU/Linux - live\nLABEL live\n\tkernel /`basename ${DESTDIR_LIVE}`/`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}`\n\tappend initrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND"
		LINUX="${LINUX}\n\n# Debian GNU/Linux - live-failsafe\nLABEL live-failsafe\n\tkernel /`basename ${DESTDIR_LIVE}`/`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}`\n\tappend initrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND ${FAILSAFE}"
	fi
else
	DEFAULT_FLAVOUR="`echo ${LIVE_LINUX_FLAVOURS} | awk '{ print $1 }'`"
	LINUX="# Debian GNU/Linux - live\nLABEL live\n\tkernel `basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}`\n\tappend initrd=initrd.img-`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND"
	LINUX="${LINUX}\n\n# Debian GNU/Linux - live-failsafe\nLABEL live-failsafe\n\tkernel `basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}`\n\tappend initrd=initrd.img-`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND ${FAILSAFE}"
fi

if [ "`echo ${LIVE_LINUX_FLAVOURS} | wc -w`" -gt "1" ]
then
	for KERNEL in chroot/boot/vmlinuz*
	do
		if [ -z "${LINUX}" ]
		then
			if [ "${LIVE_BINARY_IMAGES}" = "iso" ]
			then
				LINUX="# Debian GNU/Linux - live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\nLABEL live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\n\tkernel /`basename ${DESTDIR_LIVE}`/`basename ${KERNEL}`\n\tappend initrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND"
				LINUX="${LINUX}\n\n# Debian GNU/Linux - live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`-failsafe\nLABEL live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`-failsafe\n\tkernel /`basename ${DESTDIR_LIVE}`/`basename ${KERNEL}`\n\tappend initrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND ${FAILSAFE}"
			else
				LINUX="# Debian GNU/Linux - live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\nLABEL live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\n\tkernel `basename ${KERNEL}`\n\tappend initrd=initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'` boot=${INITFS} live_BOOTAPPEND"
				LINUX="${LINUX}\n\n# Debian GNU/Linux - live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\nLABEL live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\n\tkernel `basename ${KERNEL}`\n\tappend initrd=initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND ${FAILSAFE}"
			fi
		else
			if [ "${LIVE_BINARY_IMAGES}" = "iso" ]
			then
				LINUX="${LINUX}\n\n# Debian GNU/Linux - live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\nLABEL live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\n\tkernel /`basename ${DESTDIR_LIVE}`/`basename ${KERNEL}`\n\tappend initrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND"
				LINUX="${LINUX}\n\n# Debian GNU/Linux - live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`-failsafe\nLABEL live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`-failsafe\n\tkernel /`basename ${DESTDIR_LIVE}`/`basename ${KERNEL}`\n\tappend initrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND ${FAILSAFE}"
			else
				LINUX="${LINUX}\n\n# Debian GNU/Linux - live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\nLABEL live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\n\tkernel `basename ${KERNEL}`\n\tappend initrd=initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND"
				LINUX="${LINUX}\n\n# Debian GNU/Linux - live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\nLABEL live-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`\n\tkernel `basename ${KERNEL}`\n\tappend initrd=initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'` boot=${INITFS} LIVE_BOOTAPPEND ${FAILSAFE}"
			fi
		fi
	done
fi

# Removing '//'
LINUX="`echo ${LINUX} | sed -e 's#//#/#g'`"

# Assembling debian-installer configuration
if [ "${LIVE_DEBIAN_INSTALLER}" = "enabled" ]
then
	VMLINUZ_DI="vmlinuz"
	INITRD_DI="initrd.gz"

	VMLINUZ_GI="gtk/vmlinuz"
	INITRD_GI="gtk/initrd.gz"

	# Workaround for syslinux (<< 3.36) which doesn't support long file/path names
	if [ "${LIVE_DISTRIBUTION}" = "etch" ]
	then
		if [ "${LIVE_BINARY_IMAGES}" = "tar" ] || [ "${LIVE_BINARY_IMAGES}" = "usb-hdd" ]
		then
			VMLINUZ_DI="vmlinuz.di"
			INITRD_DI="initrddi.gz"

			VMLINUZ_GI="vmlinuz.gi"
			INITRD_GI="initrdgi.gz"
		fi
	fi

	# Workaround for syslinux (<< 3.36) which doesn't support long file/path names
	if [ "`basename ${DESTDIR_LIVE}`" = "binary" ]
	then
		LIVE_LINUX_INSTALL="LABEL install\n\tkernel ${VMLINUZ_DI}\n\tappend vga=normal initrd=${INITRD_DI} -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL linux\n\tkernel ${VMLINUZ_DI}\n\tappend vga=normal initrd=${INITRD_DI} -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL installgui\n\tkernel ${VMLINUZ_GI}\n\tappend video=vesa:ywrap,mtrr vga=788 initrd=${INITRD_GI} -- "

		LIVE_KENREL_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL expert\n\tkernel ${VMLINUZ_DI}\n\tappend priority=low vga=normal initrd=${INITRD_DI} -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL expertgui\n\tkernel ${VMLINUZ_GI}\n\tappend priority=low video=vesa:ywrap,mtrr vga=788 initrd=${INITRD_GI} -- "

		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL rescue\n\tkernel ${VMLINUZ_DI}\n\tappend vga=normal initrd=${INITRD_DI} rescue/enable=true -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL rescuegui\n\tkernel ${VMLINUZ_GI}\n\tappend video=vesa:ywrap,mtrr vga=788 initrd=${INITRD_GI} rescue/enable=true -- "

		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL auto\n\tkernel ${VMLINUZ_DI}\n\tappend auto=true priority=critical vga=normal initrd=${INITRD_DI} -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL autogui\n\tkernel ${VMLINUZ_GI}\n\tappend auto=true priority=critical video=vesa:ywrap,mtrr vga=788 initrd=${INITRD_GI} -- "
	else
		LIVE_LINUX_INSTALL="LABEL install\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL linux\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL installgui\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_GI}\n\tappend video=vesa:ywrap,mtrr vga=788 initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_GI} -- "

		LIVE_KENREL_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL expert\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend priority=low vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL expertgui\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_GI}\n\tappend priority=low video=vesa:ywrap,mtrr vga=788 initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_GI} -- "

		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL rescue\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} rescue/enable=true -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL rescuegui\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_GI}\n\tappend video=vesa:ywrap,mtrr vga=788 initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_GI} rescue/enable=true -- "

		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL auto\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend auto=true priority=critical vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} -- "
		LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL autogui\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_GI}\n\tappend auto=true priority=critical video=vesa:ywrap,mtrr vga=788 initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_GI} -- "
	fi
fi

LIVE_LINUX_INSTALL="`echo ${LIVE_LINUX_INSTALL} | sed -e 's/binary//g' -e 's#//#/#g'`"

# Assembling memtest configuration
if [ -f "${DESTDIR_LIVE}"/memtest ]
then
	if [ "${LIVE_BINARY_IMAGES}" != "net" ]
	then
		# Workaround for syslinux (<< 3.36) which doesn't support long file/path names
		if [ "`basename ${DESTDIR_LIVE}`" = "binary" ]
		then
			MEMTEST="LABEL memtest\n\tkernel memtest"
		else
			MEMTEST="LABEL memtest\n\tkernel /`basename ${DESTDIR_LIVE}`/memtest"
		fi
	else
		MEMTEST="LABEL memtest\n\tkernel memtest"
	fi

	MEMTEST="`echo ${MEMTEST} | sed -e 's#//#/#g'`"
fi

case "${LIVE_BINARY_IMAGES}" in
	iso)
		# Copying syslinux
		mkdir -p binary/isolinux
		cp chroot/usr/lib/syslinux/isolinux.bin binary/isolinux
		cp -r "${LIVE_TEMPLATES}"/syslinux/* binary/isolinux

		# Copying splash screen
		if [ -f config/binary_syslinux/splash.rle ]
		then
			LIVE_SYSLINUX_SPLASH="config/binary_syslinux/splash.rle"
		fi

		if [ -n "${LIVE_SYSLINUX_SPLASH}" ]
		then
			if [ "${LIVE_SYSLINUX_SPLASH}" = "none" ]
			then
				rm -f binary/isolinux/splash.rle
				sed -e "s/.*splash.*//" binary/isolinux/boot.txt
			else
				cp -f "${LIVE_SYSLINUX_SPLASH}" binary/isolinux/splash.rle
			fi
		fi

		# Configure syslinux templates
		sed -i -e "s@LIVE_LINUX_LIVE@${LINUX}@" -e "s@LIVE_LINUX_INSTALL@${LIVE_LINUX_INSTALL}@" -e "s@LIVE_MEMTEST@${MEMTEST}@" binary/isolinux/isolinux.cfg
		sed -i -e "s#LIVE_BOOTAPPEND#${LIVE_BOOTAPPEND}#" binary/isolinux/isolinux.cfg
		sed -i -e "s/LIVE_DATE/`date +%Y%m%d`/" binary/isolinux/f1.txt
		sed -i -e "s/LIVE_VERSION/${VERSION}/" binary/isolinux/f10.txt

		# Remove unused files
		rm -f binary/isolinux/pxelinux.cfg

		# Working arround syslinux 8.3 limitation
		if [ "`echo ${LIVE_LINUX_FLAVOURS} | wc -w`" -gt "1" ]
		then
			for FLAVOUR in ${LIVE_LINUX_FLAVOURS}
			do
				NUMBER=$(($NUMBER + 1))

				mv "${DESTDIR_LIVE}"/vmlinuz-*-${FLAVOUR} "${DESTDIR_LIVE}"/vmlinuz${NUMBER}
				mv "${DESTDIR_LIVE}"/initrd.img-*-${FLAVOUR} "${DESTDIR_LIVE}"/initrd${NUMBER}.img
				sed -i -e "s/vmlinuz-.*-${FLAVOUR}/vmlinuz${NUMBER}/g" -e "s/initrd.img-.*-${FLAVOUR}/initrd${NUMBER}.img/g" binary/isolinux/isolinux.cfg
			done
		else
			mv "${DESTDIR_LIVE}"/vmlinuz-*-${LIVE_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/vmlinuz
			mv "${DESTDIR_LIVE}"/initrd.img-*-${LIVE_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/initrd.img
			sed -i -e "s/vmlinuz-.*-${LIVE_LINUX_FLAVOURS}/vmlinuz/g" -e "s/initrd.img-.*-${LIVE_LINUX_FLAVOURS}/initrd.img/g" binary/isolinux/isolinux.cfg
		fi
		;;

	net)
		# Copying syslinux
		cp chroot/usr/lib/syslinux/pxelinux.0 tftpboot

		# Install syslinux templates
		mkdir -p tftpboot/pxelinux.cfg
		cp -r "${LIVE_TEMPLATES}"/syslinux/* tftpboot/pxelinux.cfg
		mv tftpboot/pxelinux.cfg/pxelinux.cfg tftpboot/pxelinux.cfg/default
		sed -i -e 's#splash.rle#pxelinux.cfg/splash.rle#' tftpboot/pxelinux.cfg/boot.txt

		# Copying splash screen
		if [ -f config/binary_syslinux/splash.rle ]
		then
			LIVE_SYSLINUX_SPLASH="config/binary_syslinux/splash.rle"
		fi

		if [ -n "${LIVE_SYSLINUX_SPLASH}" ]
		then
			if [ "${LIVE_SYSLINUX_SPLASH}" = "none" ]
			then
				rm -f tftpboot/pxelinux.cfg/splash.rle
				sed -e "s/.*splash.*//" tftpboot/pxelinux.cfg/boot.txt
			else
				cp -f "${LIVE_SYSLINUX_SPLASH}" tftpboot/pxelinux.cfg/splash.rle
			fi
		fi

		# Configure syslinux templates
		sed -i -e "s@LIVE_LINUX_LIVE@${LINUX}@" -e "s@LIVE_LINUX_INSTALL@${LIVE_LINUX_INSTALL}@" -e "s@LIVE_MEMTEST@${MEMTEST}@" tftpboot/pxelinux.cfg/default
		sed -i -e "s/LIVE_NET_SERVER/${LIVE_NET_SERVER}/" -e "s#LIVE_NET_PATH#${LIVE_NET_PATH}#" -e "s#LIVE_BOOTAPPEND#${LIVE_BOOTAPPEND}#" tftpboot/pxelinux.cfg/default
		sed -i -e "s/LIVE_DATE/`date +%Y%m%d`/" tftpboot/pxelinux.cfg/f1.txt
		sed -i -e "s/LIVE_VERSION/${VERSION}/" tftpboot/pxelinux.cfg/f10.txt

		# Remove unused files
		rm -f tftpboot/pxelinux.cfg/isolinux.cfg

		# Working arround syslinux 8.3 limitation
		if [ "`echo ${LIVE_LINUX_FLAVOURS} | wc -w`" -gt "1" ]
		then
			for FLAVOUR in ${LIVE_LINUX_FLAVOURS}
			do
				NUMBER=$(($NUMBER + 1))

				mv "${DESTDIR_LIVE}"/vmlinuz-*-${FLAVOUR} "${DESTDIR_LIVE}"/vmlinuz${NUMBER}
				mv "${DESTDIR_LIVE}"/initrd.img-*-${FLAVOUR} "${DESTDIR_LIVE}"/initrd${NUMBER}.img
				sed -i -e "s/vmlinuz-.*-${FLAVOUR}/vmlinuz${NUMBER}/g" -e "s/initrd.img-.*-${FLAVOUR}/initrd${NUMBER}.img/g" binary/isolinux/isolinux.cfg
			done
		else
			mv "${DESTDIR_LIVE}"/vmlinuz-*-${LIVE_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/vmlinuz
			mv "${DESTDIR_LIVE}"/initrd.img-*-${LIVE_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/initrd.img
			sed -i -e "s/vmlinuz-.*-${LIVE_LINUX_FLAVOURS}/vmlinuz/g" -e "s/initrd.img-.*-${LIVE_LINUX_FLAVOURS}/initrd.img/g" binary/isolinux/isolinux.cfg
		fi
		;;

	tar|usb-hdd)
		# Workaround for syslinux (<< 3.36) which doesn't support dedicated directory
		if [ "${LIVE_DISTRIBUTION}" = "etch" ]
		then
			DESTDIR="binary"
		else
			DESTDIR="binary/syslinux"
		fi

		# Copying syslinux
		mkdir -p "${DESTDIR}"
		cp chroot/usr/lib/syslinux/isolinux.bin "${DESTDIR}"/syslinux.bin
		cp -r "${LIVE_TEMPLATES}"/syslinux/* "${DESTDIR}"
		mv "${DESTDIR}"/isolinux.cfg "${DESTDIR}"/syslinux.cfg

		# Copying splash screen
		if [ -f config/binary_syslinux/splash.rle ]
		then
			LIVE_SYSLINUX_SPLASH="config/binary_syslinux/splash.rle"
		fi

		if [ -n "${LIVE_SYSLINUX_SPLASH}" ]
		then
			if [ "${LIVE_SYSLINUX_SPLASH}" = "none" ]
			then
				rm -f "${DESTDIR}"/splash.rle
				sed -e "s/.*splash.*//" "${DESTDIR}"/boot.txt
			else
				cp -f "${LIVE_SYSLINUX_SPLASH}" "${DESTDIR}"/splash.rle
			fi
		fi

		# Configure syslinux templates
		sed -i -e "s@LIVE_LINUX_LIVE@${LINUX}@" -e "s@LIVE_LINUX_INSTALL@${LIVE_LINUX_INSTALL}@" -e "s@LIVE_MEMTEST@${MEMTEST}@" "${DESTDIR}"/syslinux.cfg
		sed -i -e "s#LIVE_BOOTAPPEND#${LIVE_BOOTAPPEND}#" "${DESTDIR}"/syslinux.cfg
		sed -i -e "s/LIVE_DATE/`date +%Y%m%d`/" "${DESTDIR}"/f1.txt
		sed -i -e "s/LIVE_VERSION/${VERSION}/" "${DESTDIR}"/f10.txt

		# Remove unused files
		rm -f "${DESTDIR}"/pxelinux.cfg

		# Workaround for syslinux (<< 3.36) which doesn't support long file/path names
		if [ "${LIVE_DISTRIBUTION}" = "etch" ] && [ "`echo ${LIVE_LINUX_FLAVOURS} | wc -w`" -gt "1" ]
		then
			for FLAVOUR in ${LIVE_LINUX_FLAVOURS}
			do
				NUMBER=$(($NUMBER + 1))
				mv "${DESTDIR_LIVE}"/vmlinuz-*-${FLAVOUR} "${DESTDIR_LIVE}"/vmlinuz${NUMBER}
				mv "${DESTDIR_LIVE}"/initrd.img-*-${FLAVOUR} "${DESTDIR_LIVE}"/initrd${NUMBER}.img
				sed -i -e "s/vmlinuz-.*-${FLAVOUR}/vmlinuz${NUMBER}/g" -e "s/initrd.img-.*-${FLAVOUR}/initrd${NUMBER}.img/g" "${DESTDIR}"/syslinux.cfg
			done
		else
			mv "${DESTDIR_LIVE}"/vmlinuz-*-${LIVE_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/vmlinuz
			mv "${DESTDIR_LIVE}"/initrd.img-*-${LIVE_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/initrd.img
			sed -i -e "s/vmlinuz-.*-${LIVE_LINUX_FLAVOURS}/vmlinuz/g" -e "s/initrd.img-.*-${LIVE_LINUX_FLAVOURS}/initrd.img/g" "${DESTDIR}"/syslinux.cfg
		fi
		;;
esac

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .stage/binary_syslinux

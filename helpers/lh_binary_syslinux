#!/bin/sh

# lh_binary_syslinux(1) - installs syslinux into binary
# Copyright (C) 2006-2007 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

set -e

# Including common functions
LH_BASE="${LH_BASE:-/usr/share/live-helper}"

for FUNCTION in "${LH_BASE}"/functions/*.sh
do
	. "${FUNCTION}"
done

# Setting static variables
DESCRIPTION="installs syslinux into binary"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffile config/common
Read_conffile config/bootstrap
Read_conffile config/chroot
Read_conffile config/binary
Read_conffile config/source
Read_conffile "${LH_CONFIG}"
Set_defaults

if [ "${LH_BOOTLOADER}" != "syslinux" ]
then
	exit 0
fi

Echo_message "Begin installing syslinux..."

# Requiring stage file
Require_stagefile .stage/bootstrap

# Checking stage file
Check_stagefile .stage/binary_syslinux

# Checking syslinux templates
Check_templates syslinux

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

# Check architecture
Check_architecture amd64 i386

# Checking depends
Check_package chroot/usr/bin/syslinux syslinux

# Restoring cache
Restore_cache cache/packages_binary

# Installing depends
Install_package

# Local functions
Utf8_to_latin1 ()
{
	VALUE="${1}"

	echo "${VALUE}" | iconv -f utf-8 -t latin1
}

Syslinux_memtest_entry ()
{
	LABEL="${1}"
	MENULABEL=`Utf8_to_latin1 "${2}"`
	KERNEL="${3}"

	# syslinux << 3.36 lacks support to file/path
	if [ "$(basename ${DESTDIR_LIVE})" != "binary" ]
	then
		KERNEL="${DIRECTORY}/${KERNEL}"
	fi

	MEMTEST="${MEMTEST}\nLABEL ${LABEL}\n"

	# Write the menu label if the syslinux menu is being use
	MEMTEST="${MEMTEST}\tMENU LABEL ${MENULABEL}\n"

	MEMTEST="${MEMTEST}\tkernel /${KERNEL}\n"
	MEMTEST="$(/bin/echo ${MEMTEST} | sed -e 's#//#/#g')"
}

Syslinux_live_entry ()
{
	LABEL="${1}"
	MENULABEL=`Utf8_to_latin1 "${2}"`
	MENULABEL="${2}"
	KERNEL="${3}"
	INITRD="${4}"
	APPEND="${5}"

	# syslinux << 3.36 lacks support to file/path
	if [ "${LH_BINARY_IMAGES}" != "net" ] && [ "$(basename ${DESTDIR_LIVE})" != "binary" ]
	then
		DIRECTORY="$(basename ${DESTDIR_LIVE})"
		KERNEL="${DIRECTORY}/${KERNEL}"
		INITRD="${DIRECTORY}/${INITRD}"
	fi

	LINUX_LIVE="${LINUX_LIVE}\nLABEL ${LABEL}\n"

	# Write the menu label if the syslinux menu is being use
	LINUX_LIVE="${LINUX_LIVE}\tMENU LABEL ${MENULABEL}\n"

	LINUX_LIVE="${LINUX_LIVE}\tkernel /${KERNEL}\n"
	LINUX_LIVE="${LINUX_LIVE}\tappend initrd=/${INITRD} boot=${INITFS} LH_BOOTAPPEND_LIVE ${APPEND}\n"
}

Syslinux_install_entry ()
{
	LABEL="${1}"
	KERNEL="${2}"
	INITRD="${3}"
	APPEND="${4}"

	# syslinux << 3.36 lacks support to file/path
	if [ "${LH_BINARY_IMAGES}" != "net" ] && [ "$(basename ${DESTDIR_INSTALL})" != "binary" ]
	then
		DIRECTORY="$(basename ${DESTDIR_INSTALL})"
		KERNEL="${DIRECTORY}/${KERNEL}"
		INITRD="${DIRECTORY}/${INITRD}"
	fi

	# Boot in quiet mode
	if [ "${LH_DISTRIBUTION}" != "etch" ] && [ "${LABEL}" != "rescue" ] && [ "${LABEL}" != "rescuegui" ]
	then
		APPEND="${APPEND} quiet"
	fi

	LINUX_INSTALL="${LINUX_INSTALL}\nLABEL ${LABEL}\n"
	LINUX_INSTALL="${LINUX_INSTALL}\tkernel /${KERNEL}\n"
	LINUX_INSTALL="${LINUX_INSTALL}\tappend initrd=/${INITRD} ${APPEND} LH_BOOTAPPEND_INSTALL\n"
}

case "${LH_INITRAMFS}" in
	casper)
		INITFS="casper"
		;;

	live-initramfs)
		INITFS="live"
		;;
esac

# Setting destination directory
case "${LH_BINARY_IMAGES}" in
	iso)
		case "${LH_INITRAMFS}" in
			casper)
				DESTDIR_LIVE="binary/casper"
				;;

			live-initramfs)
				DESTDIR_LIVE="binary/live"
				;;
		esac

		DESTDIR_INSTALL="binary/install"
		;;

	net)
		DESTDIR_LIVE="tftpboot"
		DESTDIR_INSTALL="tftpboot"
		;;

	tar|usb-hdd)
		case "${LH_INITRAMFS}" in
			casper)
				DESTDIR_LIVE="binary/casper"
				;;

			live-initramfs)
				DESTDIR_LIVE="binary/live"
				;;
		esac

		DESTDIR_INSTALL="binary/install"

		# syslinux << 3.36 lacks support for long file/path
		if [ "${LH_DISTRIBUTION}" = "etch" ]
		then
			DESTDIR_LIVE="binary"
			DESTDIR_INSTALL="binary"
		fi
		;;
esac

Check_multiarchitecture

# Creating directory
mkdir -p "${DESTDIR_LIVE}"

# Setting boot parameters
if [ -n "${LH_ENCRYPTION}" ]
then
	LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} encryption=${LH_ENCRYPTION}"
fi

if [ -n "${LH_USERNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} username=${LH_USERNAME}"
			;;

		live-initramfs)
			if [ "${LH_USERNAME}" != "user" ]
			then
				LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} username=${LH_USERNAME}"
			fi
			;;
	esac
fi

if [ -n "${LH_HOSTNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} hostname=${LH_HOSTNAME}"
			;;

		live-initramfs)
			if [ "${LH_HOSTNAME}" != "debian" ]
			then
				LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} hostname=${LH_HOSTNAME}"
			fi
			;;
	esac
fi

if [ "${LH_UNION_FILESYSTEM}" != "unionfs" ]
then
	LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} union=${LH_UNION_FILESYSTEM}"
fi

if [ "${LH_BINARY_IMAGES}" = "net" ]
then
	case "${LH_NET_FILESYSTEM}" in
		nfs)
			LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} netboot=nfs nfsroot=LH_NET_SERVER:LH_NET_PATH"
			;;

		cifs)
			LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} netboot=cifs nfsroot=//LH_NET_SERVERLH_NET_PATH"
			;;

		*)
			Echo_error "Unsupported net filesystem"
			exit 1
			;;
	esac

	if [ -n "${LH_NET_MOUNTOPTIONS}" ]
	then
		LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} nfsopts=${LH_NET_MOUNTOPTIONS}"
	fi
fi

LH_BOOTAPPEND_LIVE="$(echo ${LH_BOOTAPPEND_LIVE} | sed -e 's/  //')"

# Parameters are listed at: linux/Documentation/kernel-parameters.txt
FAILSAFE="noapic noapm nodma nomce nolapic nosmp vga=normal"

# Assembling kernel configuration

# Default entries
DEFAULT_FLAVOUR="$(echo ${LH_LINUX_FLAVOURS} | awk '{ print $1 }')"
DEFAULT_KERNEL="$(basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR})"
DEFAULT_INITRD="initrd.img-$(echo ${DEFAULT_KERNEL} | sed -e 's/vmlinuz-//')"

Syslinux_live_entry "live" "${LH_SYSLINUX_MENU_LIVE_ENTRY}" "${DEFAULT_KERNEL}" "${DEFAULT_INITRD}"
Syslinux_live_entry "live-failsafe" "${LH_SYSLINUX_MENU_LIVE_FAILSAFE_ENTRY}" "${DEFAULT_KERNEL}" "${DEFAULT_INITRD}" "${FAILSAFE}"

if [ "$(echo ${LH_LINUX_FLAVOURS} | wc -w)" -gt "1" ]
then
	for KERNEL in chroot/boot/vmlinuz-*
	do
		KERNEL_IMAGE="$(basename ${KERNEL})"
		KERNEL_VERSION="$(echo ${KERNEL_IMAGE} | sed -e 's/vmlinuz-//')"
		INITRD="initrd.img-${KERNEL_VERSION}"

		Syslinux_live_entry "live-${KERNEL_VERSION}" "${LH_SYSLINUX_MENU_LIVE_ENTRY}" "${KERNEL_IMAGE}" "${INITRD}"
		Syslinux_live_entry "live-${KERNEL_VERSION}-failsafe" "${LH_SYSLINUX_MENU_LIVE_FAILSAFE_ENTRY}" "${KERNEL_IMAGE}" "${INITRD}" "${FAILSAFE}"
	done
fi

LINUX_LIVE="$(/bin/echo ${LINUX_LIVE} | sed -e 's/binary//g' -e 's#//#/#g')"

# Assembling debian-installer configuration
if [ "${LH_DEBIAN_INSTALLER}" != "disabled" ]
then
	VMLINUZ_DI="vmlinuz"
	INITRD_DI="initrd.gz"
	APPEND_DI="vga=normal"

	VMLINUZ_GI="gtk/vmlinuz"
	INITRD_GI="gtk/initrd.gz"
	APPEND_GI="video=vesa:ywrap,mtrr vga=788"

	# Workaround for syslinux (<< 3.36) which doesn't support long file/path names
	if [ "${LH_DISTRIBUTION}" = "etch" ]
	then
		if [ "${LH_BINARY_IMAGES}" = "tar" ] || [ "${LH_BINARY_IMAGES}" = "usb-hdd" ]
		then
			VMLINUZ_DI="vmlinuz.di"
			INITRD_DI="initrddi.gz"

			VMLINUZ_GI="vmlinuz.gi"
			INITRD_GI="initrdgi.gz"
		fi
	fi

	Syslinux_install_entry "linux" "${VMLINUZ_DI}" "${INITRD_DI}" "${APPEND_DI}"
	Syslinux_install_entry "install" "${VMLINUZ_DI}" "${INITRD_DI}" "${APPEND_DI}"
	Syslinux_install_entry "installgui" "${VMLINUZ_GI}" "${INITRD_GI}" "${APPEND_GI}"
	Syslinux_install_entry "expert" "${VMLINUZ_DI}" "${INITRD_DI}" "priority=low ${APPEND_DI}"
	Syslinux_install_entry "expertgui" "${VMLINUZ_GI}" "${INITRD_GI}" "priority=low ${APPEND_GI}"
	Syslinux_install_entry "rescue" "${VMLINUZ_DI}" "${INITRD_DI}" "rescue/enable=true ${APPEND_DI}"
	Syslinux_install_entry "rescuegui" "${VMLINUZ_GI}" "${INITRD_GI}" "rescue/enable=true ${APPEND_GI}"
	Syslinux_install_entry "auto" "${VMLINUZ_DI}" "${INITRD_DI}" "auto=true priority=critical ${APPEND_DI}"
	Syslinux_install_entry "autogui" "${VMLINUZ_GI}" "${INITRD_GI}" "auto=true priority=critical ${APPEND_GI}"
fi

LINUX_INSTALL="$(/bin/echo ${LINUX_INSTALL} | sed -e 's/binary//g' -e 's#//#/#g')"

# Assembling memtest configuration
if [ -f "${DESTDIR_LIVE}"/memtest ]
then
	Syslinux_memtest_entry "memtest" "${LH_SYSLINUX_MENU_MEMTEST_ENTRY}" "memtest"
fi

case "${LH_BINARY_IMAGES}" in
	iso)
		# Copying syslinux
		mkdir -p binary/isolinux

		case "${LH_CHROOT_BUILD}" in
			enabled)
				cp chroot/usr/lib/syslinux/isolinux.bin binary/isolinux
				;;

			disabled)
				cp /usr/lib/syslinux/isolinux.bin binary/isolinux
				;;
		esac

		# Syslinux templates
		cp -r "${TEMPLATES}"/common/* binary/isolinux
		if [ "${LH_SYSLINUX_MENU}" = "disabled" ]
		then
			cp -r "${TEMPLATES}"/normal/* binary/isolinux
		else
			cp -r "${TEMPLATES}"/menu/* binary/isolinux
		fi

		if [ -d "${TEMPLATES}"/"${LH_LANGUAGE}" ]
		then
			cp -r "${TEMPLATES}"/"${LH_LANGUAGE}"/* binary/isolinux
		else
			cp -r "${TEMPLATES}"/en/* binary/isolinux
		fi

		for FILE in binary/isolinux/*.live
		do
			mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .live)
		done

		if [ "${LH_DEBIAN_INSTALLER}" != "disabled" ]
		then
			for FILE in binary/isolinux/*.install
			do
				mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .install)
			done

			case "${LH_ARCHITECTURE}" in
				amd64|i386|powerpc)
					for FILE in binary/isolinux/*.install.g-i
					do
						mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .install.g-i)
					done
					;;

				*)
					rm -f binary/isolinux/*.install.g-i
					;;
			esac
		else
			rm -f binary/isolinux/*.install*
		fi

		mv binary/isolinux/syslinux.cfg binary/isolinux/isolinux.cfg

		# Copying configuration file
		if [ -n "${LH_SYSLINUX_CFG}" ]
		then
			cp "${LH_SYSLINUX_CFG}" binary/isolinux/isolinux.cfg
		fi

		# Copying local configuration file
		if [ -f config/binary_syslinux/syslinux.cfg ]
		then
			LH_SYSLINUX_SPLASH="config/binary_syslinux/splash.rle"
		fi

		# Copying menu module
		if [ "${LH_SYSLINUX_MENU}" != "disabled" ]
		then
			MENUPATH="$(grep 'menu.c32' binary/isolinux/header.cfg | sed 's,default\s*\(.*menu.c32\)$,\1,g')"
			MENUMODULE="$(basename ${MENUPATH})"

			mkdir -p binary/isolinux/"$(dirname ${MENUPATH})"
			cp chroot/usr/lib/syslinux/"${MENUMODULE}" binary/isolinux/"$(dirname ${MENUPATH})"
		fi

		# Copying splash screen
		if [ -z "${LH_SYSLINUX_SPLASH}" ] || [ "${LH_SYSLINUX_SPLASH}" = "none" ] 
		then
			rm -f binary/isolinux/splash.rle
			sed -i -e "s/.*splash.*//" binary/isolinux/boot.txt
		else
			if [ "${LH_SYSLINUX_MENU}" != "disabled" ]
			then
				SPLASHPATH="$(grep -i 'menu background' binary/isolinux/header.cfg | sed 's,menu\sbackground\s*\(.*\)$,\1,g')"
				if [ ! -e "${LH_SYSLINUX_SPLASH}" ]
				then
					Echo_error "${LH_SYSLINUX_SPLASH} doen't exist"
					exit 1
				fi
				mkdir -p binary/isolinux/"$(dirname ${SPLASHPATH})"
				cp -f "${LH_SYSLINUX_SPLASH}" binary/isolinux/"${SPLASHPATH}"
			else
				cp -f "${LH_SYSLINUX_SPLASH}" binary/isolinux/splash.rle
			fi
		fi

		# Configure syslinux templates
		sed -i -e "s@LINUX_LIVE@${LINUX_LIVE}@" -e "s@LINUX_INSTALL@${LINUX_INSTALL}@" -e "s@MEMTEST@${MEMTEST}@" binary/isolinux/menu.cfg
		sed -i -e "s#LH_BOOTAPPEND_INSTALL#${LH_BOOTAPPEND_INSTALL}#" -e "s#LH_BOOTAPPEND_LIVE#${LH_BOOTAPPEND_LIVE}#" binary/isolinux/menu.cfg
		if [ -e binary/isolinux/f1.txt ]
		then
			sed -i -e "s/LH_DISTRIBUTION/${LH_DISTRIBUTION}/" -e "s/LH_DATE/$(date +%Y%m%d)/" -e "s/LH_MEDIA/CD-ROM/" binary/isolinux/f1.txt
		fi
		sed -i -e "s/LH_MEDIA/CD-ROM/" binary/isolinux/f3.txt
		if [ -e binary/isolinux/f10.txt ]
		then
			sed -i -e "s/LH_VERSION/${VERSION}/" binary/isolinux/f10.txt
		fi

		# Working arround syslinux 8.3 limitation
		if [ "$(echo ${LH_LINUX_FLAVOURS} | wc -w)" -gt "1" ]
		then
			NUMBER="0"

			# FIXME: This has a bug *iff* flavours = 686 686-bigmem (note the order).

			for FLAVOUR in ${LH_LINUX_FLAVOURS}
			do
				NUMBER="$(($NUMBER + 1))"

				mv "${DESTDIR_LIVE}"/vmlinuz-*-${FLAVOUR} "${DESTDIR_LIVE}"/vmlinuz${NUMBER}
				mv "${DESTDIR_LIVE}"/initrd.img-*-${FLAVOUR} "${DESTDIR_LIVE}"/initrd${NUMBER}.img
				sed -i -e "s/vmlinuz-.*-${FLAVOUR}$/vmlinuz${NUMBER}/g" -e "s/initrd.img-.*-${FLAVOUR} /initrd${NUMBER}.img /g" binary/isolinux/menu.cfg
			done
		else
			mv "${DESTDIR_LIVE}"/vmlinuz-*-${LH_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/vmlinuz
			mv "${DESTDIR_LIVE}"/initrd.img-*-${LH_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/initrd.img
			sed -i -e "s/vmlinuz-.*-${LH_LINUX_FLAVOURS}/vmlinuz/g" -e "s/initrd.img-.*-${LH_LINUX_FLAVOURS}/initrd.img/g" binary/isolinux/menu.cfg
		fi

		sed -i -e "s/LINUX_TIMEOUT/${LH_SYSLINUX_TIMEOUT}/" binary/isolinux/footer.cfg

		# Remove whitespaces
		sed -i -e 's/\ $//g' binary/isolinux/*.cfg
		;;

	net)
		# Copying syslinux
		mkdir -p tftpboot

		case "${LH_CHROOT_BUILD}" in
			enabled)
				cp chroot/usr/lib/syslinux/pxelinux.0 tftpboot
				;;

			disabled)
				cp /usr/lib/syslinux/pxelinux.0 tftpboot
				;;
		esac

		mkdir -p tftpboot/pxelinux.cfg
		cp -r "${TEMPLATES}"/common/* tftpboot/pxelinux.cfg
		cp -r "${TEMPLATES}"/"${LH_LANGUAGE}"/* tftpboot/pxelinux.cfg

		for FILE in tftpboot/pxelinux.cfg/*.live
		do
			mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .live)
		done

		if [ "${LH_DEBIAN_INSTALLER}" != "disabled" ]
		then
			for FILE in tftpboot/pxelinux.cfg/*.install
			do
				mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .install)
			done

			if [ "${LH_ARCHITECTURE}" = "amd64" ] || [ "${LH_ARCHITECTURE}" = "i386" ] || [ "${LH_ARCHITECTURE}" = "powerpc" ]
			then
				for FILE in tftpboot/pxelinux.cfg/*.install.g-i
				do
					mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .install.g-i)
				done
			else
				rm -f tftpboot/pxelinux.cfg/*.install.g-i
			fi
		else
			rm -f tftpboot/pxelinux.cfg/*.install*
		fi

		mv tftpboot/pxelinux.cfg/syslinux.cfg tftpboot/pxelinux.cfg/default

		# Copying local configuration file
		if [ -f config/binary_syslinux/syslinux.cfg ]
		then
			cp config/binary_syslinux/syslinux.cfg tftpboot/pxelinux.cfg/default
		fi

		#sed -i -e 's#splash.rle#pxelinux.cfg/splash.rle#' tftpboot/pxelinux.cfg/boot.txt

		# Copying splash screen
		if [ -f config/binary_syslinux/splash.rle ]
		then
			LH_SYSLINUX_SPLASH="config/binary_syslinux/splash.rle"
		fi

		if [ -n "${LH_SYSLINUX_SPLASH}" ]
		then
			if [ "${LH_SYSLINUX_SPLASH}" = "none" ]
			then
				rm -f tftpboot/pxelinux.cfg/splash.rle
				sed -i -e "s/.*splash.*//" tftpboot/pxelinux.cfg/boot.txt
			else
				cp -f "${LH_SYSLINUX_SPLASH}" tftpboot/pxelinux.cfg/splash.rle
			fi
		fi

		# Configure syslinux templates
		sed -i -e "s@LINUX_LIVE@${LINUX_LIVE}@" -e "s@LINUX_INSTALL@${LINUX_INSTALL}@" -e "s@MEMTEST@${MEMTEST}@" tftpboot/pxelinux.cfg/default
		sed -i -e "s#LH_BOOTAPPEND_INSTALL#${LH_BOOTAPPEND_INSTALL}#" -e "s#LH_BOOTAPPEND_LIVE#${LH_BOOTAPPEND_LIVE}#" -e "s/LH_NET_SERVER/${LH_NET_SERVER}/" -e "s#LH_NET_PATH#${LH_NET_PATH}#" tftpboot/pxelinux.cfg/default
		sed -i -e "s/LH_DISTRIBUTION/${LH_DISTRIBUTION}/" -e "s/LH_DATE/$(date +%Y%m%d)/" -e "s/LH_MEDIA/netboot/" tftpboot/pxelinux.cfg/f1.txt
		sed -i -e "s/LH_MEDIA/netboot/" tftpboot/pxelinux.cfg/f3.txt
		sed -i -e "s/LH_VERSION/${VERSION}/" tftpboot/pxelinux.cfg/f10.txt

		# Working arround syslinux 8.3 limitation
		if [ "$(echo ${LH_LINUX_FLAVOURS} | wc -w)" -eq "1" ]
		then
			mv "${DESTDIR_LIVE}"/vmlinuz-*-${LH_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/vmlinuz
			mv "${DESTDIR_LIVE}"/initrd.img-*-${LH_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/initrd.img
			sed -i -e "s/vmlinuz-.*-${LH_LINUX_FLAVOURS}/vmlinuz/g" -e "s/initrd.img-.*-${LH_LINUX_FLAVOURS}/initrd.img/g" tftpboot/pxelinux.cfg/default
		fi

		sed -i -e "s/LINUX_TIMEOUT/${LH_SYSLINUX_TIMEOUT}/" tftpboot/pxelinux.cfg/default

		# Remove whitespaces
		sed -i -e 's/\ $//g' tftpboot/pxelinux.cfg/default
		;;

	tar|usb-hdd)
		# Workaround for syslinux (<< 3.36) which doesn't support dedicated directory
		if [ "${LH_DISTRIBUTION}" = "etch" ]
		then
			DESTDIR="binary"
		else
			DESTDIR="binary/syslinux"
		fi

		# Copying syslinux
		mkdir -p "${DESTDIR}"

		case "${LH_CHROOT_BUILD}" in
			enabled)
				cp chroot/usr/lib/syslinux/isolinux.bin "${DESTDIR}"/syslinux.bin
				;;

			disabled)
				cp /usr/lib/syslinux/isolinux.bin "${DESTDIR}"/syslinux.bin
				;;
		esac

		cp -r "${TEMPLATES}"/common/* "${DESTDIR}"
		if [ "${LH_SYSLINUX_MENU}" = "disabled" ]
		then
			cp -r "${TEMPLATES}"/normal/* "${DESTDIR}"
		else
			cp -r "${TEMPLATES}"/menu/* "${DESTDIR}"
		fi
		cp -r "${TEMPLATES}"/"${LH_LANGUAGE}"/* "${DESTDIR}"

		for FILE in "${DESTDIR}"/*.live
		do
			mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .live)
		done

		if [ "${LH_DEBIAN_INSTALLER}" != "disabled" ]
		then
			for FILE in "${DESTDIR}"/*.install
			do
				mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .install)
			done

			if [ "${LH_ARCHITECTURE}" = "amd64" ] || [ "${LH_ARCHITECTURE}" = "i386" ] || [ "${LH_ARCHITECTURE}" = "powerpc" ]
			then
				for FILE in "${DESTDIR}"/*.install.g-i
				do
					mv ${FILE} $(dirname ${FILE})/$(basename ${FILE} .install.g-i)
				done
			else
				rm -f "${DESTDIR}"/*.install.g-i
			fi
		else
			rm -f "${DESTDIR}"/*.install*
		fi

		# Copying local configuration file
		if [ -f config/binary_syslinux/syslinux.cfg ]
		then
			cp config/binary_syslinux/syslinux.cfg "${DESTDIR}"/syslinux.cfg
		fi

		# Copying splash screen
		if [ -f config/binary_syslinux/splash.rle ]
		then
			LH_SYSLINUX_SPLASH="config/binary_syslinux/splash.rle"
		fi

		if [ -n "${LH_SYSLINUX_SPLASH}" ]
		then
			if [ "${LH_SYSLINUX_SPLASH}" = "none" ]
			then
				rm -f "${DESTDIR}"/splash.rle
				sed -i -e "s/.*splash.*//" "${DESTDIR}"/boot.txt
			else
				cp -f "${LH_SYSLINUX_SPLASH}" "${DESTDIR}"/splash.rle
			fi
		fi

		# Configure syslinux templates
		sed -i -e "s@LINUX_LIVE@${LINUX_LIVE}@" -e "s@LINUX_INSTALL@${LINUX_INSTALL}@" -e "s@MEMTEST@${MEMTEST}@" "${DESTDIR}"/menu.cfg
		sed -i -e "s#LH_BOOTAPPEND_INSTALL#${LH_BOOTAPPEND_INSTALL}#" -e "s#LH_BOOTAPPEND_LIVE#${LH_BOOTAPPEND_LIVE}#" "${DESTDIR}"/menu.cfg
		if [ -e binary/isolinux/f1.txt ]
		then
			sed -i -e "s/LH_DISTRIBUTION/${LH_DISTRIBUTION}/" -e "s/LH_DATE/$(date +%Y%m%d)/" -e "s/LH_MEDIA/hd-media/" "${DESTDIR}"/f1.txt
		fi
		sed -i -e "s/LH_MEDIA/hd-media/" "${DESTDIR}"/f3.txt
		if [ -e binary/isolinux/f10.txt ]
		then
			sed -i -e "s/LH_VERSION/${VERSION}/" "${DESTDIR}"/f10.txt
		fi
		# Workaround for syslinux (<< 3.36) which doesn't support long file/path names
		if [ "$(echo ${LH_LINUX_FLAVOURS} | wc -w)" -gt "1" ]
		then
			NUMBER="0"

			for FLAVOUR in ${LH_LINUX_FLAVOURS}
			do
				NUMBER="$(($NUMBER + 1))"
				mv "${DESTDIR_LIVE}"/vmlinuz-*-${FLAVOUR} "${DESTDIR_LIVE}"/vmlinuz${NUMBER}
				mv "${DESTDIR_LIVE}"/initrd.img-*-${FLAVOUR} "${DESTDIR_LIVE}"/initrd${NUMBER}.img
				sed -i -e "s/vmlinuz-.*-${FLAVOUR}$/vmlinuz${NUMBER}/g" -e "s/initrd.img-.*-${FLAVOUR} /initrd${NUMBER}.img /g" "${DESTDIR}"/menu.cfg
			done
		else
			mv "${DESTDIR_LIVE}"/vmlinuz-*-${LH_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/vmlinuz
			mv "${DESTDIR_LIVE}"/initrd.img-*-${LH_LINUX_FLAVOURS} "${DESTDIR_LIVE}"/initrd.img
			sed -i -e "s/vmlinuz-.*-${LH_LINUX_FLAVOURS}/vmlinuz/g" -e "s/initrd.img-.*-${LH_LINUX_FLAVOURS}/initrd.img/g" "${DESTDIR}"/menu.cfg
			sed -i -e "s/LINUX_TIMEOUT/${LH_SYSLINUX_TIMEOUT}/" "${DESTDIR}"/footer.cfg
		fi

		# Remove whitespaces
		sed -i -e 's/\ $//g' "${DESTDIR}"/*.cfg
		;;
esac

# Saving cache
Save_cache cache/packages_binary

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .stage/binary_syslinux

#!/bin/sh

# lh_binary_grub(1) - installs grub into binary
# Copyright (C) 2006-2007 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

set -e

# Including common functions
LH_BASE="${LH_BASE:-/usr/share/live-helper}"

for FUNCTION in "${LH_BASE}"/functions/*.sh
do
	. "${FUNCTION}"
done

# Setting static variables
DESCRIPTION="installs grub into binary"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffile config/common
Read_conffile config/bootstrap
Read_conffile config/chroot
Read_conffile config/binary
Read_conffile config/source
Set_defaults

if [ "${LIVE_BOOTLOADER}" != "grub" ]
then
	exit 0
fi

Echo_message "Begin installing grub..."

# Requiring stage file
Require_stagefile .stage/bootstrap

# Checking stage file
Check_stagefile .stage/binary_grub

# Checking grub templates
Check_templates grub

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

# Check architecture
Check_architecture amd64 i386

# Checking depends
Check_package chroot/usr/sbin/grub grub

# Installing depends
Install_package

# Local functions
Grub_live_entry ()
{
	LABEL="${1}"
	KERNEL="${2}"
	INITRD="${3}"
	APPEND="${4}"

	LINUX_LIVE="${LINUX_LIVE}\ntitle\t\tDebian GNU/Linux - ${LABEL}"
	LINUX_LIVE="${LINUX_LIVE}\nkernel\t\t/${KERNEL} boot=${INITFS} LIVE_BOOTAPPEND ${APPEND}"
	LINUX_LIVE="${LINUX_LIVE}\ninitrd\t\t/${INITRD}"
}

Grub_install_entry ()
{
	LABEL="${1}"
	KERNEL="${2}"
	INITRD="${3}"
	APPEND="${4}"

	if [ "${LIVE_DISTRIBUTION}" != "etch" ] && [ "${LABEL}" != "rescue" ] && [ "${LABEL}" != "rescuegui" ]
	then
		APPEND="${APPEND} quiet"
	fi

	LINUX_INSTALL="${LINUX_INSTALL}\ntitle\t\tDebian GNU/Linux - ${LABEL}"
	LINUX_INSTALL="${LINUX_INSTALL}\nkernel\t\t/${KERNEL} ${APPEND} --"
	LINUX_INSTALL="${LINUX_INSTALL}\ninitrd\t\t/${INITRD}"
}

case "${LH_INITRAMFS}" in
	casper)
		INITFS="casper"
		;;

	live-initramfs)
		INITFS="live"
		;;
esac

# Setting destination directory
case "${LIVE_BINARY_IMAGES}" in
	iso|tar)
		case "${LH_INITRAMFS}" in
			casper)
				DESTDIR_LIVE="binary/casper"
				;;

			live-initramfs)
				DESTDIR_LIVE="binary/live"
				;;
		esac

		DESTDIR_INSTALL="binary/install"
		;;

	usb-hdd|net)
		Echo_error "not yet supported, aborting (FIXME)."
		exit 1
	;;
esac

Check_multiarchitecture

# Creating directory
mkdir -p "${DESTDIR_LIVE}"

# Setting boot parameters
if [ -n "${LIVE_ENCRYPTION}" ]
then
	LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} encryption=${LIVE_ENCRYPTION}"
fi

if [ -n "${LIVE_USERNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} username=${LIVE_USERNAME}"
			;;

		live-initramfs)
			if [ "${LIVE_USERNAME}" != "user" ]
			then
				LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} username=${LIVE_USERNAME}"
			fi
			;;
	esac
fi

if [ -n "${LIVE_HOSTNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} hostname=${LIVE_HOSTNAME}"
			;;

		live-initramfs)
			if [ "${LIVE_HOSTNAME}" != "debian" ]
			then
				LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} hostname=${LIVE_HOSTNAME}"
			fi
			;;
	esac
fi

if [ "${LIVE_UNION_FILESYSTEM}" != "unionfs" ]
then
	LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} union=${LIVE_UNION_FILESYSTEM}"
fi

LIVE_BOOTAPPEND="`echo ${LIVE_BOOTAPPEND} | sed -e 's/  //'`"

# Parameters are listed at: linux/Documentation/kernel-parameters.txt
FAILSAFE="noapic noapm nodma nomce nolapic nosmp vga=normal"

# Assembling kernel configuration

# Default entries
DEFAULT_FLAVOUR="`echo ${LIVE_LINUX_FLAVOURS} | awk '{ print $1 }'`"
DEFAULT_KERNEL="`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}`"
DEFAULT_INITRD="initrd.img-`echo ${DEFAULT_KERNEL} | sed -e 's/vmlinuz-//'`"

Grub_live_entry "live" "${DEFAULT_KERNEL}" "${DEFAULT_INITRD}"
Grub_live_entry "live (fail-safe mode)" "${DEFAULT_KERNEL}" "${DEFAULT_INITRD}" "${FAILSAFE}"

for KERNEL in chroot/boot/vmlinuz-*
do
	VERSION="`basename ${KERNEL} | sed -e 's/vmlinuz-//'`"

	Grub_live_entry "live, kernel ${VERSION}" "`basename ${DESTDIR_LIVE}`/`basename ${KERNEL}`" "`basename ${DESTDIR_LIVE}`/initrd.img-${VERSION}"
	Grub_live_entry "live, kernel ${VERSION} (fail-safe mode)" "`basename ${DESTDIR_LIVE}`/`basename ${KERNEL}`" "`basename ${DESTDIR_LIVE}`/initrd.img-${VERSION}" "${FAILSAFE}"
done

LINUX_LIVE="`echo ${LINUX_LIVE} | sed -e 's/binary//g' -e 's#//#/#g'`"

# Assembling debian-installer configuration
if [ "${LIVE_DEBIAN_INSTALLER}" != "disabled" ]
then
	LINUX_LIVE="title\t\tLive:\nroot\n\n${LINUX_LIVE}"
	LINUX_INSTALL="title\t\tInstaller:\nroot"

	VMLINUZ_DI="vmlinuz"
	INITRD_DI="initrd.gz"
	APPEND_DI="vga=normal"

	VMLINUZ_GI="gtk/vmlinuz"
	INITRD_GI="gtk/initrd.gz"
	APPEND_GI="video=vesa:ywrap,mtrr vga=788"

	Grub_install_entry "install" "${VMLINUZ_DI}" "${INITRD_DI}" "${APPEND_DI}"
	Grub_install_entry "installgui" "${VMLINUZ_GI}" "${INITRD_GI}" "${APPEND_GI}"
	Grub_install_entry "expert" "${VMLINUZ_DI}" "${INITRD_DI}" "priority=low ${APPEND_DI}"
	Grub_install_entry "expertgui" "${VMLINUZ_GI}" "${INITRD_GI}" "priority=low ${APPEND_GI}"
	Grub_install_entry "rescue" "${VMLINUZ_DI}" "${INITRD_DI}" "rescue/enable=true ${APPEND_DI}"
	Grub_install_entry "rescuegui" "${VMLINUZ_GI}" "${INITRD_GI}" "rescue/enable=true ${APPEND_GI}"
	Grub_install_entry "auto" "${VMLINUZ_DI}" "${INITRD_DI}" "auto=true priority=critical ${APPEND_DI}"
	Grub_install_entry "autogui" "${VMLINUZ_GI}" "${INITRD_GI}" "auto=true priority=critical ${APPEND_GI}"
fi

LINUX_INSTALL="`echo ${LINUX_INSTALL} | sed -e 's/binary//g' -e 's#//#/#g'`"

# Assembling memtest configuration
if [ -f "${DESTDIR_LIVE}"/memtest ]
then
	MEMTEST="title\t\tOther:\nroot"
	MEMTEST="${MEMTEST}\n\ntitle\t\t${LIVE_MEMTEST}\nkernel\t\t/`basename ${DESTDIR_LIVE}`/memtest"
	MEMTEST="`echo ${MEMTEST} | sed -e 's#//#/#g'`"
fi

# Copying templates
mkdir -p binary/boot/grub
cp -r "${LIVE_TEMPLATES}"/grub/* binary/boot/grub

# Copying grub
case ${LIVE_BINARY_IMAGES} in
	iso)
		cp chroot/usr/lib/grub/*/stage2_eltorito binary/boot/grub
		;;

	tar|usb-hdd)
		cp chroot/usr/lib/grub/*/stage1 chroot/usr/lib/grub/*/e2fs_stage1_5 chroot/usr/lib/grub/*/stage2 binary/boot/grub
		;;
esac

# Copying local configuration file
if [ -f config/binary_grub/menu.lst ]
then
	cp config/binary_grub/menu.lst binary/boot/grub/menu.lst
fi

# Copying splash screen
if [ -f config/binary_grub/splash.xpm.gz ]
then
	LIVE_GRUB_SPLASH="config/binary_grub/splash.xpm.gz"
elif [ -f config/binary_grub/splash.xpm ]
then
	LIVE_GRUB_SPLASH="config/binary_grub/splash.xpm"
fi

if [ -n "${LIVE_GRUB_SPLASH}" ]
then
	if [ "${LIVE_GRUB_SPLASH}" = "none" ]
	then
		# Removing splash file
		rm -f binary/boot/grub/splash.xpm.gz

		# Removing splash entry
		sed -i -e "s/splashimage.*//" binary/boot/grub/menu.lst
	else
		# Overwriting splash file
		cp -f "${LIVE_GRUB_SPLASH}" binary/boot/grub
		sed -i -e "s#splashimage.*#splashimage /boot/grub/`basename ${LIVE_GRUB_SPLASH}`#" binary/boot/grub/menu.lst
	fi
fi

sed -i -e "s#LINUX_LIVE#${LINUX_LIVE}#" -e "s#LINUX_INSTALL#${LINUX_INSTALL}#" -e "s#MEMTEST#${MEMTEST}#" binary/boot/grub/menu.lst
sed -i -e "s#LIVE_BOOTAPPEND#${LIVE_BOOTAPPEND}#" binary/boot/grub/menu.lst

sed -i -e 's/\ $//g' binary/boot/grub/menu.lst

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .stage/binary_grub

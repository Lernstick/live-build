#!/bin/sh

# lh_binary_grub(1) - installs grub into binary
# Copyright (C) 2006-2007 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

set -e

# Source common functions
for FUNCTION in /usr/share/live-helper/functions/*.sh
do
	. ${FUNCTION}
done

# Set static variables
DESCRIPTION="installs grub into binary"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

Echo_debug "Init ${PROGRAM}"

# Reading configuration files
Read_conffile config/bootstrap
Read_conffile config/chroot
Read_conffile config/common
Read_conffile config/image
Set_defaults

if [ "${LIVE_BOOTLOADER}" != "grub" ]
then
	exit 0
fi

Breakpoint "binary_grub: Init"

# Requiring stage file
Require_stagefile .stage/bootstrap

# Checking stage file
Check_stagefile .stage/binary_grub

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

if [ "${LIVE_ARCHITECTURE}" != "amd64" ] && [ "${LIVE_ARCHITECTURE}" != "i386" ]
then
	Echo_warning "skipping binary_grub, foreign architecture."
	exit 0
fi

# Check templates
if [ ! -d "${LIVE_TEMPLATES}" ]
then
	if [ -d ../"${LIVE_TEMPLATES}" ]
	then
		LIVE_TEMPLATES="../${LIVE_TEMPLATES}"
	else
		Echo_error "user specified templates not accessible in ${LIVE_TEMPLATES}"
		exit 1
	fi
fi

# Checking depends
Check_package chroot/usr/sbin/grub grub

# Installing depends
Install_package

# Setting destination directory
case "${LIVE_BINARY_IMAGE}" in
	iso|usb|hdd)
	DESTDIR="binary/live"
		;;

	net)
		Echo_error "not supported, aborting (FIXME)."
		exit 1
	;;
esac

# Temporary check for broken syslinux
if [ "${LIVE_BINARY_IMAGE}" = "iso" ]
then
	# Assemble multi-arch
	if [ -n "${MULTIARCH}" ]
	then
		case "${LIVE_ARCHITECTURE}" in
			i386)
				DESTDIR="${DESTDIR}.386"
				;;
		esac
	fi
fi

# Creating directory
if [ ! -d "${DESTDIR}" ]
then
	mkdir -p "${DESTDIR}"
fi

# Setting boot parameters
if [ -n "${LIVE_ENCRYPTION}" ]
then
	LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} encryption=${LIVE_ENCRYPTION}"
fi

if [ -n "${LIVE_USERNAME}" ]
then
	LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} username=${LIVE_USERNAME}"
fi

if [ -n "${LIVE_HOSTNAME}" ]
then
	LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} hostname=${LIVE_HOSTNAME}"
fi

LIVE_BOOTAPPEND="`echo ${LIVE_BOOTAPPEND} | sed -e 's/  //'`"

# Parameters are listed at: linux/Documentation/kernel-parameters.txt
FAILSAFE="noapic noapm nodma nomce nolapic nosmp vga=normal"

# Assembling kernel configuration
DEFAULT_FLAVOUR="`echo ${LIVE_KERNEL_FLAVOUR} | awk '{ print $1 }'`"
LINUX="title\t\tDebian GNU/Linux - Live\nkernel\t\t/`basename ${DESTDIR}`/`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}` boot=casper LIVE_BOOTAPPEND\ninitrd\t\t/`basename ${DESTDIR}`/initrd.img-`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinuz-//'`"
LINUX="${LINUX}\n\ntitle\t\tDebian GNU/Linux - Live (failsafe mode)\nkernel\t\t/`basename ${DESTDIR}`/`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR}` boot=casper LIVE_BOOTAPPEND ${FAILSAFE}\ninitrd\t\t/`basename ${DESTDIR}`/initrd.img-`basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinuz-//'`"

if [ "`echo ${LIVE_KERNEL_FLAVOUR} | wc -w`" -gt "1" ]
then
	for KERNEL in chroot/boot/vmlinuz*
	do
		if [ -z "${LINUX}" ]
		then
			LINUX="title\t\tDebian GNU/Linux - Live, kernel `basename ${KERNEL} | sed -e 's/vmlinuz-//'`\nkernel\t\t/`basename ${DESTDIR}`/`basename ${KERNEL}` boot=casper LIVE_BOOTAPPEND\ninitrd\t\t/`basename ${DESTDIR}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`"
			LINUX="${LINUX}\n\ntitle\t\tDebian GNU/Linux - Live, kernel `basename ${KERNEL} | sed -e 's/vmlinuz-//'` (failsafe mode)\nkernel\t\t/`basename ${DESTDIR}`/`basename ${KERNEL}` boot=casper LIVE_BOOTAPPEND ${FAILSAFE}\ninitrd\t\t/`basename ${DESTDIR}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`"
		else
			LINUX="${LINUX}\n\ntitle\t\tDebian GNU/Linux - Live, kernel `basename ${KERNEL} | sed -e 's/vmlinuz-//'`\nkernel /`basename ${DESTDIR}`/`basename ${KERNEL}` boot=casper LIVE_BOOTAPPEND\ninitrd\t\t/`basename ${DESTDIR}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`"
			LINUX="${LINUX}\n\ntitle\t\tDebian GNU/Linux - Live, kernel `basename ${KERNEL} | sed -e 's/vmlinuz-//'` (failsafe mode)\nkernel /`basename ${DESTDIR}`/`basename ${KERNEL}` boot=casper LIVE_BOOTAPPEND ${FAILSAFE}\ninitrd\t\t/`basename ${DESTDIR}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinuz-//'`"
		fi
	done
fi

LINUX="`echo ${LINUX} | sed -e 's#//#/#g'`"

# Assembling memtest configuration
if [ -f "${DESTDIR}"/memtest ]
then
	MEMTEST="title\t\t${LIVE_MEMTEST}\nkernel\t\t/`basename ${DESTDIR}`/memtest"
	MEMTEST="`echo ${MEMTEST} | sed -e 's#//#/#g'`"
fi

# Copying templates
mkdir -p binary/boot/grub
cp -r "${LIVE_TEMPLATES}"/grub/* binary/boot/grub

# Copyring grub
case ${LIVE_BINARY_IMAGE} in
	iso)
		cp chroot/usr/lib/grub/*/stage2_eltorito binary/boot/grub
		;;

	usb|hdd)
		cp chroot/usr/lib/grub/*/stage1 chroot/usr/lib/grub/*/stage2 binary/boot/grub
		;;
esac

# Copying splash screen
if [ -f config/binary_grub/splash.xpm.gz ]
then
	LIVE_GRUB_SPLASH="config/binary_grub/splash.xpm.gz"
fi

if [ -n "${LIVE_GRUB_SPLASH}" ]
then
	if [ "${LIVE_GRUB_SPLASH}" = "none" ]
	then
		# Removing splash file
		rm -f binary/boot/grub/splash.xpm.gz

		# Removing splash entry
		sed -e "s/splashimage.*//" binary/boot/grub/menu.lst
	else
		# Overwriting splash file
		cp -f "${LIVE_GRUB_SPLASH}" binary/boot/grub/splash.xpm.gz
	fi
fi

# Configure grub templates
cat >> binary/boot/grub/menu.lst << EOF
# This is a divider, added to separate the menu items below from the Debian
# ones.
title		Other:
root

LIVE_MEMTEST
EOF

sed -i -e "s#LIVE_KERNEL_LIVE#${LINUX}#" -e "s#LIVE_KERNEL_INSTALL#${LIVE_KERNEL_INSTALL}#" -e "s#LIVE_MEMTEST#${MEMTEST}#" binary/boot/grub/menu.lst
sed -i -e "s#LIVE_BOOTAPPEND#${LIVE_BOOTAPPEND}#" binary/boot/grub/menu.lst

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .stage/binary_grub

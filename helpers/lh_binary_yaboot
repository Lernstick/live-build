#!/bin/sh

# lh_binary_yaboot(1) - installs yaboot into binary
# Copyright (C) 2006-2007 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

set -e

# Including common functions
LH_BASE="${LH_BASE:-/usr/share/live-helper}"

for FUNCTION in "${LH_BASE}"/functions/*.sh
do
	. "${FUNCTION}"
done

# Setting static variables
DESCRIPTION="installs yaboot into binary"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffile config/common
Read_conffile config/bootstrap
Read_conffile config/chroot
Read_conffile config/binary
Read_conffile config/source
Set_defaults

if [ "${LIVE_BOOTLOADER}" != "yaboot" ]
then
	exit 0
fi

Echo_message "Begin installing yaboot..."

# Requiring stage file
Require_stagefile .stage/bootstrap

# Checking stage file
Check_stagefile .stage/binary_yaboot

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

if [ "${LIVE_ARCHITECTURE}" != "powerpc" ] && [ "${LIVE_ARCHITECTURE}" != "ppc64" ]
then
	Echo_warning "skipping binary_yaboot, foreign architecture."
	#exit 0 # REMOVE_ME
fi

# Check user templates
if [ ! -d "${LIVE_TEMPLATES}" ]
then
	if [ -d ../"${LIVE_TEMPLATES}" ]
	then
		LIVE_TEMPLATES="../${LIVE_TEMPLATES}"
	else
		Echo_error "user specified templates not accessible in ${LIVE_TEMPLATES}"
		exit 1
	fi
fi

# Checking local templates
if [ -d config/templates/yaboot ]
then
	LIVE_TEMPLATES="config/templates"
fi

# Checking depends
Check_package chroot/usr/lib/yaboot/yaboot yaboot

# Installing depends
Install_package

case "${LH_INITRAMFS}" in
	casper)
		INITFS="casper"
		;;

	live-initramfs)
		INITFS="live"
		;;
esac

# Setting destination directory
case "${LIVE_BINARY_IMAGES}" in
	iso)
		DESTDIR_LIVE="binary/live"
		DESTDIR_INSTALL="binary/install"
		;;

	net|tar|usb-hdd)
		Echo_error "not supported, FIXME"
	;;
esac

# Temporary check for broken syslinux FIXME
if [ "${LIVE_BINARY_IMAGES}" = "iso" ]
then
	# Assembling multi-arch
	if [ -n "${MULTIARCH}" ]
	then
		case "${LIVE_ARCHITECTURE}" in
			powerpc)
				DESTDIR_LIVE="${DESTDIR_LIVE}.ppc"
				DESTDIR_INSTALL="${DESTDIR_INSTALL}.ppc"
				;;
		esac
	fi
fi

# Creating directory
mkdir -p "${DESTDIR_LIVE}"

# Setting boot parameters
if [ -n "${LIVE_ENCRYPTION}" ]
then
	LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} encryption=${LIVE_ENCRYPTION}"
fi

if [ -n "${LIVE_USERNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} username=${LIVE_USERNAME}"
			;;

		live-initramfs)
			if [ "${LIVE_USERNAME}" != "user" ]
			then
				LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} username=${LIVE_USERNAME}"
			fi
			;;
	esac
fi

if [ -n "${LIVE_HOSTNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} hostname=${LIVE_HOSTNAME}"
			;;

		live-initramfs)
			if [ "${LIVE_HOSTNAME}" != "debian" ]
			then
				LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND} hostname=${LIVE_HOSTNAME}"
			fi
			;;
	esac
fi

LIVE_BOOTAPPEND="`echo ${LIVE_BOOTAPPEND} | sed -e 's/  //'`"

# Parameters are listed at: linux/Documentation/kernel-parameters.txt
FAILSAFE="noapic noapm nodma nomce nolapic nosmp vga=normal" # FIXME

# Assembling kernel configuration
if [ "${LIVE_BINARY_IMAGES}" != "net" ]
then
	DEFAULT_FLAVOUR="`echo ${LIVE_LINUX_FLAVOURS} | awk '{ print $1 }'`"
	LINUX="image=/`basename ${DESTDIR_LIVE}`/`basename chroot/boot/vmlinux-*${DEFAULT_FLAVOUR}`\n\tinitrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename chroot/boot/vmlinux-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinux-//'`\n\tlabel=live\n\tappend=\"boot=${INITFS} LIVE_BOOTAPPEND\"\n\tinitrd-size=1048576\n\tread-only"
else
	DEFAULT_FLAVOUR="`echo ${LIVE_LINUX_FLAVOURS} | awk '{ print $1 }'`"
	LINUX="image=`basename chroot/boot/vmlinux-*${DEFAULT_FLAVOUR}`\n\tinitrd=initrd.img-`basename chroot/boot/vmlinux-*${DEFAULT_FLAVOUR} | sed -e 's/vmlinux-//'`\n\tlabel=live\n\tappend=\"boot=${INITFS} LIVE_BOOTAPPEND\"\n\tinitrd-size=1048576\n\tread-only"
fi

# FIXME
if [ "`echo ${LIVE_LINUX_FLAVOURS} | wc -w`" -gt "1" ]
then
	for KERNEL in chroot/boot/vmlinux*
	do
		if [ -z "${LINUX}" ]
		then
			if [ "${LIVE_BINARY_IMAGES}" = "iso" ]
		then
				LINUX="label LIVE-`basename ${KERNEL} | sed -e 's/vmlinux-//'`\n  kernel /`basename ${DESTDIR_LIVE}`/`basename ${KERNEL}`\n  append initrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinux-//'` boot=${INITFS} LIVE_BOOTAPPEND"
			else
				LINUX="label LIVE-`basename ${KERNEL} | sed -e 's/vmlinux-//'`\n  kernel `basename ${KERNEL}`\n  append initrd=initrd.img-`basename ${KERNEL} | sed -e 's/vmlinux-//'` boot=${INITFS} LIVE_BOOTAPPEND"
		fi
		else
			if [ "${LIVE_BINARY_IMAGES}" = "iso" ]
			then
				LINUX="${LINUX}\nlabel LIVE-`basename ${KERNEL} | sed -e 's/vmlinux-//'`\n  kernel /`basename ${DESTDIR_LIVE}`/`basename ${KERNEL}`\n  append initrd=/`basename ${DESTDIR_LIVE}`/initrd.img-`basename ${KERNEL} | sed -e 's/vmlinux-//'` boot=${INITFS} LIVE_BOOTAPPEND"
			else
				LINUX="${LINUX}\nlabel LIVE-`basename ${KERNEL} | sed -e 's/vmlinux-//'`\n  kernel `basename ${KERNEL}`\n  append initrd=initrd.img-`basename ${KERNEL} | sed -e 's/vmlinux-//'` boot=${INITFS} LIVE_BOOTAPPEND"
			fi
		fi
	done
fi

# Removing '//'
LINUX="`echo ${LINUX} | sed -e 's#//#/#g'`"

# Assembling debian-installer configuration
if [ "${LIVE_DEBIAN_INSTALLER}" = "enabled" ] || [ "${LIVE_LIVE_INSTALLER}" = "enabled" ]
then
	VMLINUZ_DI="vmlinuz"
	INITRD_DI="initrd.gz"

	VMLINUZ_GI="gtk/vmlinuz"
	INITRD_GI="gtk/initrd.gz"

	LIVE_LINUX_INSTALL="LABEL install\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} -- "
	LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL linux\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} -- "
	LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL installgui\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_GI}\n\tappend video=vesa:ywrap,mtrr vga=788 initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_GI} -- "

	LIVE_KENREL_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL expert\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend priority=low vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} -- "
	LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL expertgui\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_GI}\n\tappend priority=low video=vesa:ywrap,mtrr vga=788 initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_GI} -- "

	LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL rescue\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} rescue/enable=true -- "
	LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL rescuegui\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_GI}\n\tappend video=vesa:ywrap,mtrr vga=788 initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_GI} rescue/enable=true -- "

	LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL auto\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_DI}\n\tappend auto=true priority=critical vga=normal initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_DI} -- "
	LIVE_LINUX_INSTALL="${LIVE_LINUX_INSTALL}\n\nLABEL autogui\n\tkernel /`basename ${DESTDIR_INSTALL}`/${VMLINUZ_GI}\n\tappend auto=true priority=critical video=vesa:ywrap,mtrr vga=788 initrd=/`basename ${DESTDIR_INSTALL}`/${INITRD_GI} -- "
fi

LIVE_LINUX_INSTALL="`echo ${LIVE_LINUX_INSTALL} | sed -e 's/binary//g' -e 's#//#/#g'`"

case "${LIVE_BINARY_IMAGES}" in
	iso)
		# Copying yaboot
		mkdir -p binary/yaboot
		cp chroot/usr/lib/yaboot/yaboot binary/yaboot
		cp -r "${LIVE_TEMPLATES}"/yaboot/* binary/yaboot

		# Configure yaboot templates
		sed -i -e "s#LIVE_LINUX_LIVE#${LINUX}#" -e "s#LIVE_LINUX_INSTALL#${LIVE_LINUX_INSTALL}#" binary/yaboot/yaboot.conf
		sed -i -e "s#LIVE_BOOTAPPEND#${LIVE_BOOTAPPEND}#" binary/yaboot/yaboot.conf
		sed -i -e "s/LIVE_DATE/`date +%Y%m%d`/" -e "s/LIVE_VERSION/${VERSION}/" binary/yaboot/boot.msg
		;;
esac

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .stage/binary_yaboot

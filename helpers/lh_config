#!/bin/sh

# lh_config(1) - create configuration for live-helper(7)
# Copyright (C) 2006-2007 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

set -e

# Source common functions
for FUNCTION in /usr/share/live-helper/functions/*.sh
do
	. ${FUNCTION}
done

# Set static variables
DESCRIPTION="create configuration for live-helper(7)"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

CONFIG="${1}"

Echo_debug "Init ${PROGRAM}"

if [ -n "${LH_CONFIG}" ]
then
	if [ -d /usr/share/live-helper/configs/"${LH_CONFIG}" ]
	then
		mkdir "${LH_CONFIG}"
		cp -r /usr/share/live-helper/configs/"${LH_CONFIG}" "${LH_CONFIG}"/config

		LIVE_ROOT="${LH_CONFIG}"
		CONFIG=""
	else
		Echo_error "Couldn't find config ${LH_CONFIG} in /usr/share/live-helper/configs/."
	fi
fi

if [ "${CONFIG}" != "newconfig" ]
then
	# Source existing configuration
	Read_conffile "${LIVE_ROOT}"/config/common
	Read_conffile "${LIVE_ROOT}"/config/bootstrap
	Read_conffile "${LIVE_ROOT}"/config/chroot
	Read_conffile "${LIVE_ROOT}"/config/binary
	Read_conffile "${LIVE_ROOT}"/config/source
fi

# Setting defaults
Set_defaults

Breakpoint "config: Init"

# Creating configuration directory
mkdir -p "${LIVE_ROOT}"/config
mkdir -p "${LIVE_ROOT}"/config/includes
mkdir -p "${LIVE_ROOT}"/config/templates

# Creating live-helper configuration
cat > "${LIVE_ROOT}"/config/common << EOF
# config/common: configuration for live-helper(7)

# \$LH_MODE: set distribution mode
# (Default: ${LH_MODE})
LH_MODE="${LH_MODE}"

# \$LH_APT: set package manager
# (Default: ${LH_APT})
LH_APT="${LH_APT}"

# \$LH_APT_FTPPROXY: set apt/aptitude ftp proxy
# (Default: autodetected or empty)
LH_APT_FTPPROXY="${LH_APT_FTPPROXY}"

# \$LH_APT_HTTPPROXY: set apt/aptitude http proxy
# (Default: autodetected or empty)
LH_APT_HTTPPROXY="${LH_APT_HTTPPROXY}"

# \$LH_APT_PDIFFS: set apt/aptitude pdiff indices
# (Default: ${LH_APT_PDIFFS})
LH_APT_PDIFFS="${LH_APT_PDIFFS}"

# \$LH_APT_RECOMMENDS: enable recommends
# (Default: ${LH_APT_RECOMMENDS})
LH_APT_RECOMMENDS="${LH_APT_RECOMMENDS}"

# \$LH_APT_SECURE: enable secure
# (Default: ${LH_APT_SECURE})
LH_APT_SECURE="${LH_APT_SECURE}"

# \$LH_BOOTSTRAP: select the bootstrap program
# (Default: ${LH_BOOTSTRAP})
LH_BOOTSTRAP="${LH_BOOTSTRAP}"

# \$LH_CACHE_INDICES: control if downloaded packages should be cached
# (Default: ${LH_CACHE_INDICES})
LH_CACHE_INDICES="${LH_CACHE_INDICES}"

# \$LH_CACHE_PACKAGES: control if downloaded packages should be cached
# (Default: ${LH_CACHE_PACKAGES})
LH_CACHE_PACKAGES="${LH_CACHE_PACKAGES}"

# \$LH_CACHE_STAGES: control if downloaded packages should be cached
# (Default: ${LH_CACHE_STAGES})
LH_CACHE_STAGES="${LH_CACHE_STAGES}"

# \$LH_DEBCONF_FRONTEND: set the debconf(1) frontend to use
# (Default: ${LH_DEBCONF_FRONTEND})
LH_DEBCONF_FRONTEND="${LH_DEBCONF_FRONTEND}"

# \$LH_DEBCONF_PRIORITY: set the debconf(1) priority to use
# (Default: ${LH_DEBCONF_PRIORITY})
LH_DEBCONF_PRIORITY="${LH_DEBCONF_PRIORITY}"

# \$LH_DEBCONF_NOWARNINGS: set debconf(1) warnings
# (Default: ${LH_DEBCONF_NOWARNINGS})
LH_DEBCONF_NOWARNINGS="${LH_DEBCONF_NOWARNINGS}"

# \$LH_GENISOIMAGE: set the genisoimage program
# (Default: ${LH_GENISOIMAGE})
LH_GENISOIMAGE="${LH_GENISOIMAGE}"

# \$LH_LOSETUP: set the losetup program
# (Default: autodetected)
LH_LOSETUP="${LH_LOSETUP}"

# \$LH_TASKSEL: set the tasksel program
# (Default: ${LH_TASKSEL})
LH_TASKSEL="${LH_TASKSEL}"

# \$LH_INITRAMFS: set the initramfs generator
# (Default: ${LH_INITRAMFS})
LH_INITRAMFS="${LH_INITRAMFS}"

# \$LIVE_ROOT: set the root directory
# (Default: ${LIVE_ROOT})
LIVE_ROOT="${LIVE_ROOT}"

# \$LIVE_INCLUDES: set includes
# (Default: ${LIVE_INCLUDES})
LIVE_INCLUDES="${LIVE_INCLUDES}"

# \$LIVE_TEMPLATES: set templates
# (Default: ${LIVE_TEMPLATES})
LIVE_TEMPLATES="${LIVE_TEMPLATES}"

# Live-helper options

# \$LH_ROOT_COMMAND: use sudo or equivalent
# (Default: empty)
#LH_ROOT_COMMAND="sudo"

# \$LH_BREAKPOINTS: enable breakpoints
# (Default: ${LH_BREAKPOINTS})
#LH_BREAKPOINTS="${LH_BREAKPOINTS}"

# \$LH_DEBUG: enable debug
# (Default: ${LH_DEBUG})
#LH_DEBUG="${LH_DEBUG}"

# \$LH_FORCE: enable force
# (Default: ${LH_FORCE})
#LH_FORCE="${LH_FORCE}"

# \$LH_QUIET: enable quiet
# (Default: ${LH_QUIET})
#LH_QUIET="${LH_QUIET}"

# \$LH_VERBOSE: enable verbose
# (Default: ${LH_VERBOSE})
#LH_VERBOSE="${LH_VERBOSE}"
EOF

# Creating lh_chroot_* configuration
cat > "${LIVE_ROOT}"/config/chroot << EOF
# config/chroot: configuration for lh_chroot_*

# \$LIVE_CHROOT_FILESYSTEM: set chroot filesystem
# (Default: ${LIVE_CHROOT_FILESYSTEM})
LIVE_CHROOT_FILESYSTEM="${LIVE_CHROOT_FILESYSTEM}"

# \$LIVE_INTERACTIVE: set interactive build
# (Default: ${LIVE_INTERACTIVE})
LIVE_INTERACTIVE="${LIVE_INTERACTIVE}"

# \$LIVE_LINUX_FLAVOURS: set the kernel flavour to use
# (Default: autodetected)
LIVE_LINUX_FLAVOURS="${LIVE_LINUX_FLAVOURS}"

# \$LIVE_LINUX_PACKAGES: set the kernel packages to use
# (Default: autodetected)
LIVE_LINUX_PACKAGES="${LIVE_LINUX_PACKAGES}"

# \$LIVE_KEYRING_PACKAGES: set the keyring packages
# (Default: empty)
LIVE_KEYRING_PACKAGES="${LIVE_KEYRING_PACKAGES}"

# \$LIVE_HOOKS: set hook commands
# (Default: empty)
LIVE_HOOKS="${LIVE_HOOKS}"

# \$LIVE_LANGUAGE: set the language to use
# (Default: empty)
LIVE_LANGUAGE="${LIVE_LANGUAGE}"

# \$LIVE_PACKAGES: set the packages to install
# (Default: empty)
LIVE_PACKAGES="${LIVE_PACKAGES}"

# \$LIVE_PACKAGES_LISTS: set the package list to install
# (Default: ${LIVE_PACKAGES_LISTS})
LIVE_PACKAGES_LISTS="${LIVE_PACKAGES_LISTS}"

# \$LIVE_TASKS: set the tasks to install
# (Default: empty)
LIVE_TASKS="${LIVE_TASKS}"

# \$LIVE_SECURITY: enable security updates
# (Default: ${LIVE_SECURITY})
LIVE_SECURITY="${LIVE_SECURITY}"

# \$LIVE_SYMLINKS: enable symlink convertion
# (Default: ${LIVE_SYMLINKS})
LIVE_SYMLINKS="${LIVE_SYMLINKS}"

# \$LIVE_SYSVINIT: enable sysvinit
# (Default: ${LIVE_SYSVINIT})
LIVE_SYSVINIT="${LIVE_SYSVINIT}"
EOF

# Creating lh_chroot_* directories
mkdir -p "${LIVE_ROOT}"/config/chroot_local-hooks
mkdir -p "${LIVE_ROOT}"/config/chroot_local-includes
mkdir -p "${LIVE_ROOT}"/config/chroot_local-packages
mkdir -p "${LIVE_ROOT}"/config/chroot_local-packageslists
mkdir -p "${LIVE_ROOT}"/config/chroot_sources

# Creating lh_bootstrap_* configuration
cat > "${LIVE_ROOT}"/config/bootstrap << EOF
# config/bootstrap: configuration for lh_bootstrap_*

# \$LIVE_ARCHITECTURE: select the chroot architecture
# (Default: autodetected)
LIVE_ARCHITECTURE="${LIVE_ARCHITECTURE}"

# \$LIVE_DISTRIBUTION: select the distribution to use
# (Default: ${LIVE_DISTRIBUTION})
LIVE_DISTRIBUTION="${LIVE_DISTRIBUTION}"

# \$LIVE_DISTRIBUTION_CONFIG: set distribution config directory
# (Default: empty)
LIVE_DISTRIBUTION_CONFIG="${LIVE_DISTRIBUTION_CONFIG}"

# \$LIVE_BOOTSTRAP_FLAVOUR: select the flavour to use
# (Default: ${LIVE_BOOTSTRAP_FLAVOUR})
LIVE_BOOTSTRAP_FLAVOUR="${LIVE_BOOTSTRAP_FLAVOUR}"

# \$LIVE_MIRROR_BOOTSTRAP: set the mirror to fetch packages from
# (Default: ${LIVE_MIRROR_BOOTSTRAP})
LIVE_MIRROR_BOOTSTRAP="${LIVE_MIRROR_BOOTSTRAP}"

# \$LIVE_MIRROR_BOOTSTRAP_SECURITY: set the security mirror to fetch packages from
# (Default: ${LIVE_MIRROR_BOOTSTRAP_SECURITY})
LIVE_MIRROR_BOOTSTRAP_SECURITY="${LIVE_MIRROR_BOOTSTRAP_SECURITY}"

# \$LIVE_MIRROR_BINARY: set the mirror which ends up in the image
# (Default: ${LIVE_MIRROR_BINARY})
LIVE_MIRROR_BINARY="${LIVE_MIRROR_BINARY}"

# \$LIVE_MIRROR_BINARY_SECURITY: set the security mirror which ends up in the image
# (Default: ${LIVE_MIRROR_BINARY_SECURITY})
LIVE_MIRROR_BINARY_SECURITY="${LIVE_MIRROR_BINARY_SECURITY}"

# \$LIVE_SECTIONS: select the section(s) to use
# (Default: ${LIVE_SECTIONS})
LIVE_SECTIONS="${LIVE_SECTIONS}"
EOF

# Creating lh_binary_* configuration
cat > "${LIVE_ROOT}"/config/binary << EOF
# config/chroot: configuration for lh_binary_*

# \$LIVE_BINARY_INDICES: set apt/aptitude generic indices
# (Default: ${LIVE_BINARY_INDICES})
LIVE_BINARY_INDICES="${LIVE_BINARY_INDICES}"

# \$LIVE_BOOTAPPEND: set boot parameters
# (Default: empty)
LIVE_BOOTAPPEND="${LIVE_BOOTAPPEND}"

# \$LIVE_ENCRYPTION: set encrytion
# (Default: empty)
LIVE_ENCRYPTION="${LIVE_ENCRYPTION}"

# \$LIVE_USERNAME: set username
# (Default: ${LIVE_USERNAME})
LIVE_USERNAME="${LIVE_USERNAME}"

# \$LIVE_HOSTNAME: set hostname
# (Default: ${LIVE_HOSTNAME})
LIVE_HOSTNAME="${LIVE_HOSTNAME}"

# \$LIVE_MEMTEST: set memtest
# (Default: ${LIVE_MEMTEST})
LIVE_MEMTEST="${LIVE_MEMTEST}"

# \$LIVE_DEBIAN_INSTALLER: set debian-installer
# (Default: ${LIVE_DEBIAN_INSTALLER})
LIVE_DEBIAN_INSTALLER="${LIVE_DEBIAN_INSTALLER}"

# \$LIVE_ISO_VOLUME: set iso volume
# (Default: ${LIVE_ISO_VOLUME})
LIVE_ISO_VOLUME="${LIVE_ISO_VOLUME}"

# \$LIVE_NET_SERVER: set the netboot server address
# (Default: ${LIVE_NET_SERVER})
LIVE_NET_SERVER="${LIVE_NET_SERVER}"

# \$LIVE_NET_PATH: set the netboot server directory
# (Default: ${LIVE_NET_PATH})
LIVE_NET_PATH="${LIVE_NET_PATH}"

# \$LIVE_BOOTLOADER: set bootloader
# (Default: ${LIVE_BOOTLOADER})
LIVE_BOOTLOADER="${LIVE_BOOTLOADER}"

# \$LIVE_GRUB_SPLASH: set custom grub splash
# (Default: empty)
LIVE_GRUB_SPLASH="${LIVE_GRUB_SPLASH}"

# \$LIVE_SYSLINUX_SPLASH: set custom syslinux splash
# (Default: empty)
LIVE_SYSLINUX_SPLASH="${LIVE_SYSLINUX_SPLASH}"

# \$LIVE_BINARY_IMAGES: set image type
# (Default: ${LIVE_BINARY_IMAGES})
LIVE_BINARY_IMAGES="${LIVE_BINARY_IMAGES}"
EOF

# Creating lh_source_* configuration
cat > "${LIVE_ROOT}"/config/source << EOF
# config/chroot: configuration for lh_source_*

# \$LIVE_SOURCE: set source option
# (Default: ${LH_SOURCE})
LIVE_SOURCE="${LIVE_SOURCE}"

# \$LIVE_SOURCE_IMAGES: set image type
# (Default: ${LIVE_SOURCE_IMAGES})
LIVE_SOURCE_IMAGES="${LIVE_SOURCE_IMAGES}"
EOF

# Creating lh_binary_* directories
mkdir -p "${LIVE_ROOT}"/config/binary_grub
mkdir -p "${LIVE_ROOT}"/config/binary_local-includes
mkdir -p "${LIVE_ROOT}"/config/binary_syslinux
